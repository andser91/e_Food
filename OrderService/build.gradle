buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // classpath("org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:2.1.1")
        classpath "gradle.plugin.com.avast.gradle:gradle-docker-compose-plugin:0.9.1"
    }
}


plugins {
    id 'org.unbroken-dome.test-sets' version '2.1.1'
}

apply plugin: 'docker-compose'

testSets {
    integrationTest { dirName = 'integration-test' }
}

dockerCompose {

//	startedServices = []
    useComposeFiles = ['../docker-compose-integration-test.yml']
    stopContainers = false
    // i contenitori possono poi essere arrestati con gradle :order-service:composeDownForced

}

dockerCompose.isRequiredBy(integrationTest)

integrationTest.doFirst {
    dockerCompose.exposeAsEnvironment(test)
}


dependencies {

    implementation project(":Swagger-Common")
    implementation project(":CommonEvent")

    implementation project(":OrderService-api")
    implementation project(":ConsumerService-api")
    implementation project(":RestaurantService-api")
    //kafka
    implementation 'org.springframework.kafka:spring-kafka'
    //spring
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    //Web Client
    compile 'org.springframework.boot:spring-boot-starter-webflux'
    compile 'org.projectreactor:reactor-spring:1.0.1.RELEASE'
    //postgres
    implementation 'org.postgresql:postgresql'
    //test
    testCompile 'io.rest-assured:rest-assured:3.3.0'
    testCompile 'io.rest-assured:spring-mock-mvc:3.3.0'
    testCompile "io.rest-assured:json-path:3.3.0"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    integrationTestImplementation 'org.springframework.boot:spring-boot-starter-test'
}